// Murilo Badim - 199168
// Erik de Chaves Lavarda - 199412

#include <iostream>
#include <vector>
#include <string>

using namespace std;

class Pessoa {
protected:  
    string nome;
    int idade;

public:
    Pessoa(string nome, int idade) : nome(nome), idade(idade) {} //Construtor 
    virtual void mostrarIdentificacao() const = 0;
    string getNome() const { return nome; }
    int getIdade() const { return idade; }
};

class Rota;
class Passageiro;
class Onibus;

class Motorista : public Pessoa {
private:
    int numeroIdentificacao;
    Rota* rotaAtual;

public:
    Motorista(string nome, int idade, int numero)
        : Pessoa(nome, idade), numeroIdentificacao(numero), rotaAtual(nullptr) {} 

    void iniciarViagem(Rota* rota);
    void mostrarIdentificacao() const override {  
        cout << "Motorista: " << nome << ", ID: " << numeroIdentificacao << endl;
    }
};

class Rota {
private:
    string origem;
    string destino;
    float distanciaKm;
    Onibus* onibusAtribuido; // Relacionamento Agregação

public:
    Rota(string origem, string destino, float distancia)
        : origem(origem), destino(destino), distanciaKm(distancia), onibusAtribuido(nullptr) {} 

    void atribuirOnibus(Onibus* onibus);
    string getOrigem() const { return origem; }
    string getDestino() const { return destino; }
    float calcularDuracaoViagem() const { return distanciaKm / 60.0; } 
};

class Bilhete {
private:
    string numeroIdentificacao;
    float preco;
    Rota* rota;
    Passageiro* passageiro;

public:
    Bilhete(string numero, float preco, Rota* rota, Passageiro* passageiro)
        : numeroIdentificacao(numero), preco(preco), rota(rota), passageiro(passageiro) {} 

    string getNumeroIdentificacao() const { return numeroIdentificacao; }
    void exibirInformacoes() const;
};

class Passageiro : public Pessoa {
private:
    Bilhete* bilhete;

public:
    Passageiro(string nome, int idade)
        : Pessoa(nome, idade), bilhete(nullptr) {} 

    void comprarBilhete(Bilhete* b);
    void cancelarBilhete();
    void mostrarIdentificacao() const override { 
        cout << "Passageiro: " << nome << ", Idade: " << idade << endl;
    }
};

class Onibus {
private:
    string numeroIdentificacao;
    int capacidadePassageiros;
    bool emManutencao;
    Rota* rotaAtual;
    vector<Passageiro*> passageiros;

public:
    Onibus(string numero, int capacidade)
        : numeroIdentificacao(numero), capacidadePassageiros(capacidade), emManutencao(false), rotaAtual(nullptr) {}

    void iniciarViagem(Rota* rota);
    void adicionarPassageiro(Passageiro* passageiro);
    void setEmManutencao(bool status);
    string getNumeroIdentificacao() const { return numeroIdentificacao; }
};

void Onibus::iniciarViagem(Rota* rota) { 
    rotaAtual = rota;
    cout << "Onibus " << numeroIdentificacao << " iniciou viagem na rota de " << rota->getOrigem() << " para " << rota->getDestino() << "." << endl;
}

void Onibus::adicionarPassageiro(Passageiro* passageiro) { 
    if (passageiros.size() < static_cast<size_t>(capacidadePassageiros)) {
        passageiros.push_back(passageiro);
        cout << "Passageiro " << passageiro->getNome() << " embarcou no onibus " << numeroIdentificacao << "." << endl;
    } else {
        cout << "Capacidade maxima de passageiros atingida para o onibus " << numeroIdentificacao << "." << endl;
    }
}

void Onibus::setEmManutencao(bool status) {
    emManutencao = status;
    if (emManutencao) {
        cout << "Onibus " << numeroIdentificacao << " entrou em manutencao." << endl;
    } else {
        cout << "Manutencao concluida para o onibus " << numeroIdentificacao << "." << endl;
    }
}

void Rota::atribuirOnibus(Onibus* onibus) {
    onibusAtribuido = onibus;
    cout << "Onibus " << onibus->getNumeroIdentificacao() << " atribuido a rota de " << origem << " para " << destino << "." << endl;
}

void Bilhete::exibirInformacoes() const { 
    cout << "Bilhete " << numeroIdentificacao << ": Preco - R$" << preco << ", Rota - " << rota->getOrigem() << " para " << rota->getDestino() << "." << endl;
}

void Passageiro::comprarBilhete(Bilhete* b) {
    bilhete = b;
    cout << "Passageiro " << nome << " comprou o bilhete " << bilhete->getNumeroIdentificacao() << "." << endl;
}

void Passageiro::cancelarBilhete() {
    if (bilhete) {
        cout << "Bilhete " << bilhete->getNumeroIdentificacao() << " cancelado para o passageiro " << nome << "." << endl;
        bilhete = nullptr;
    } else {
        cout << "Nao ha bilhete para cancelar." << endl;
    }
}

void Motorista::iniciarViagem(Rota* rota) {
    rotaAtual = rota;
    cout << "Motorista " << nome << " iniciou viagem na rota de " << rota->getOrigem() << " para " << rota->getDestino() << "." << endl;
}

int main() {
    Onibus onibus1("001", 50);
    Onibus onibus2("002", 40);

    Rota rotaA("Sao Paulo", "Rio de Janeiro", 400.0);
    Rota rotaB("Belo Horizonte", "Brasilia", 600.0);

    Motorista motorista1("Jose", 45, 101);
    Motorista motorista2("Maria", 38, 102);

    Passageiro passageiro1("Joao", 30);
    Passageiro passageiro2("Ana", 25);

    rotaA.atribuirOnibus(&onibus1);
    rotaB.atribuirOnibus(&onibus2);

    motorista1.iniciarViagem(&rotaA);
    motorista2.iniciarViagem(&rotaB);

    Bilhete bilhete1("B001", 150.0, &rotaA, &passageiro1);
    Bilhete bilhete2("B002", 200.0, &rotaB, &passageiro2);

    passageiro1.comprarBilhete(&bilhete1);
    passageiro2.comprarBilhete(&bilhete2);

    onibus1.adicionarPassageiro(&passageiro1);
    onibus2.adicionarPassageiro(&passageiro2);

    bilhete1.exibirInformacoes();
    bilhete2.exibirInformacoes();

    Pessoa* pessoas[] = { &motorista1, &motorista2, &passageiro1, &passageiro2 };
    for (Pessoa* p : pessoas) {
        p->mostrarIdentificacao();
    }

    return 0;
}
